import styles from '../css/MiniPlayer.module.css';
import { useState, useEffect } from 'react';
import axios from 'axios';
import {Link} from "react-router-dom";
import Player from "./playlist/Player";

const MiniPlayer = ({ selectedTrack }) => {
    const [audioUrl, setAudioUrl] = useState(null); // BlobÏúºÎ°ú ÏÉùÏÑ±Îêú Object URL
    const [audio, setAudio] = useState(null); // Audio Í∞ùÏ≤¥
    const [isPlaying, setIsPlaying] = useState(false);
    const [duration, setDuration] = useState(0);
    const [currentTime, setCurrentTime] = useState(0);
    const [showPlayer, setShowPlayer] = useState(false);
    const [volume, setVolume] = useState(1); // Ï¥àÍ∏∞ Î≥ºÎ•® (1 = 100%)
    const [isMuted, setIsMuted] = useState(false); // ÏùåÏÜåÍ±∞ ÏÉÅÌÉú
    const [showVolumeModal, setShowVolumeModal] = useState(false);

    // Blob Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Í≥† Object URL ÏÉùÏÑ±
    useEffect(() => {
        if (selectedTrack) {
            // Ïù¥Ï†Ñ Ìä∏ÎûôÏùò Ïò§ÎîîÏò§ Ï§ëÏßÄ Î∞è URL Ìï¥Ï†ú
            if (audio) {
                audio.pause();
                audio.src = '';
                setAudio(null);
            }
            if (audioUrl) {
                URL.revokeObjectURL(audioUrl);
                setAudioUrl(null);
            }

            axios
                .get(`http://localhost:8787/music/play/${selectedTrack.title}`, {
                    withCredentials: true,
                    responseType: 'blob', // Blob Îç∞Ïù¥ÌÑ∞Î•º Î∞òÌôòÎ∞õÏùå
                })
                .then((response) => {
                    const url = URL.createObjectURL(response.data); // Blob Îç∞Ïù¥ÌÑ∞Î•º Object URLÎ°ú Î≥ÄÌôò
                    setAudioUrl(url);
                })
                .catch((error) => {
                    console.error('Error loading audio:', error);
                });
        }
    }, [selectedTrack]);

    // Audio Í∞ùÏ≤¥ ÏÉùÏÑ± Î∞è Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
    useEffect(() => {
        if (audioUrl) {
            const newAudio = new Audio(audioUrl);
            setAudio(newAudio);

            newAudio.onloadedmetadata = () => {
                setDuration(newAudio.duration); // Ï¥ù Ïû¨ÏÉù ÏãúÍ∞Ñ
                setCurrentTime(0); // Ï¥àÍ∏∞Ìôî
                setIsPlaying(true); // ÏûêÎèô Ïû¨ÏÉù ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
                newAudio.play(); // ÏûêÎèô Ïû¨ÏÉù
            };

            newAudio.ontimeupdate = () => {
                setCurrentTime(newAudio.currentTime); // ÌòÑÏû¨ Ïû¨ÏÉù ÏúÑÏπò
            };

            newAudio.onended = () => {
                setIsPlaying(false); // Ïû¨ÏÉùÏù¥ ÎÅùÎÇòÎ©¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            };

            return () => {
                newAudio.pause();
                newAudio.src = ''; // Î©îÎ™®Î¶¨ ÎàÑÏàò Î∞©ÏßÄ
                setAudio(null);
                URL.revokeObjectURL(audioUrl); // Object URL Ìï¥Ï†ú
            };
        }
    }, [audioUrl]);

    const togglePlayPause = () => {
        if (audio) {
            if (isPlaying) {
                audio.pause();
            } else {
                audio.play();
            }
            setIsPlaying(!isPlaying);
        }
    };

    const handleSeek = (e) => {
        if (audio) {
            const newTime = parseFloat(e.target.value);
            audio.currentTime = newTime; // Ïò§ÎîîÏò§Ïùò ÌòÑÏû¨ Ïû¨ÏÉù ÏúÑÏπò Î≥ÄÍ≤Ω
            setCurrentTime(newTime);
        }
    };

    // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
    const formatTime = (time) => {
        const minutes = Math.floor(time / 60)
            .toString()
            .padStart(2, '0');
        const seconds = Math.floor(time % 60)
            .toString()
            .padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    const handleNextTrack = () => {
        // setCurrentTrackIndex((prevIndex) => (prevIndex + 1) % playlist.length);
        setIsPlaying(false); // Îã§Ïùå Í≥°ÏúºÎ°ú ÎÑòÏñ¥Í∞à Îïå ÏûêÎèô Ïû¨ÏÉù
    };

    const handlePreviousTrack = () => {
        // setCurrentTrackIndex((prevIndex) => (prevIndex - 1 + playlist.length) % playlist.length);
        setIsPlaying(false);
    };

    const togglePlayer = () => {
        setShowPlayer(!showPlayer); // Player Ïä¨ÎùºÏù¥Îìú ÏÉÅÌÉú Î≥ÄÍ≤Ω
    };

    const handleVolumeChange = (e) => {
        const newVolume = parseFloat(e.target.value);
        setVolume(newVolume);
        if (audio) {
            audio.volume = newVolume;
        }
        setIsMuted(newVolume === 0);
    };

    const toggleMute = () => {
        if (audio) {
            if (isMuted) {
                audio.volume = volume;
            } else {
                audio.volume = 0;
            }
            setIsMuted(!isMuted);
        }
    };

    const getVolumeIcon = () => {
        if (isMuted || volume === 0) {
            return 'üîá'; // ÏùåÏÜåÍ±∞ ÏïÑÏù¥ÏΩò
        } else if (volume > 0 && volume <= 0.5) {
            return 'üîà'; // ÏûëÏùÄ ÏÜåÎ¶¨ ÏïÑÏù¥ÏΩò
        } else {
            return 'üîä'; // ÌÅ∞ ÏÜåÎ¶¨ ÏïÑÏù¥ÏΩò
        }
    };

    const likeThis = () => {
        axios.get(`http://localhost:8787/music/isLiked/${selectedTrack.musicCode}`
            , { withCredentials: true })
        .then((response) => {
            if (response.data === true) {
                axios.post(`http://localhost:8787/music/unlike`, {
                    musicCode: selectedTrack.musicCode,
                }, { withCredentials: true })
                    .then(() => {
                        alert("Ï¢ãÏïÑÏöî Ï∑®ÏÜå");
                    })
                    .catch(error => {
                        console.error("Failed to unlike:", error);
                    })
            } else {
                axios.post(`http://localhost:8787/music/like`, {
                    musicCode: selectedTrack.musicCode,
                }, { withCredentials: true })
                    .then(() => {
                        alert("Ï¢ãÏïÑÏöî Îì±Î°ù");
                    })
                    .catch(error => {
                        console.error("Failed to like:", error);
                    })           
            }
        })
        .catch(error => {
            console.error("Failed to like process:", error);
        })
    }

    return (
        <>
            {/* Player Ïª¥Ìè¨ÎÑåÌä∏ */}
            <div
                className={`${styles.a} ${
                    showPlayer ? styles.show : ""
                }`}
            >
                <Player selectedTrack={selectedTrack}/>
            </div>
            <div className={styles.play_controls}>
                <section className={styles.mini_player_container}>
                    <div className={styles.play_controls_wrapper}>
                        <div className={styles.play_controls_elements}>
                            <button type={"button"} className={styles.play_controls_previous}
                                    onClick={handlePreviousTrack}>Skip to previous
                            </button>
                            <button
                                type="button"
                                onClick={togglePlayPause}
                                className={isPlaying ? styles.play_controls_pause : styles.play_controls_play}
                            >
                                {isPlaying ? 'Pause' : 'Play'}
                            </button>
                            <button type={"button"} className={styles.play_controls_next} onClick={handleNextTrack}>Skip
                                to
                                next
                            </button>

                            {/* ÌòÑÏû¨ ÏãúÍ∞Ñ / Ï¥ù ÏãúÍ∞Ñ */}
                            <div style={{
                                marginLeft: "20px",
                            }}>
                                <span>
                                    {formatTime(currentTime)} / {formatTime(duration)}
                                </span>
                            </div>

                            {/* Ïû¨ÏÉù ÏúÑÏπò Ï°∞Ï†à */}
                            <input
                                type="range"
                                min="0"
                                max={duration || 0}
                                value={currentTime}
                                onChange={handleSeek}
                            />
                            <div className={styles.play_controls_cast_control}></div>
                            <div className={styles.play_controls_volume}>
                                <div className={styles.volume}>
                                    <div className={styles.visually_hidden}></div>
                                    <div className={styles.volume_icon_wrapper}>
                                        <div
                                            className={styles.volume_control}
                                            onMouseEnter={() => setShowVolumeModal(true)}
                                            onMouseLeave={() => setShowVolumeModal(false)}
                                        >
                                            <button type={"button"} className={styles.volume_icon}
                                                    onClick={toggleMute}>{getVolumeIcon()}</button>
                                            {showVolumeModal && (
                                                <div className={styles.volume_modal}>
                                                    <input
                                                        type="range"
                                                        min="0"
                                                        max="1"
                                                        step="0.01"
                                                        value={isMuted ? 0 : volume}
                                                        onChange={handleVolumeChange}
                                                    />
                                                    <span>{Math.round(volume * 100)}%</span>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                    <div className={styles.sc_hidden}>Use shift and the arrow up and down keys to
                                        change
                                        the
                                        volume.
                                    </div>
                                    <div className={styles.volume_slider_wrapper} role={"slider"} aria-valuemin={0}
                                         aria-valuemax={1} aria-valuenow={1}>
                                        <div className={styles.volume_slider_background}></div>
                                        <div className={styles.volume_slider_progress} style={{
                                            height: "92px"
                                        }}></div>
                                        <div className={styles.volume_slider_handle} style={{
                                            top: "10px"
                                        }}></div>
                                    </div>
                                </div>
                            </div>
                            <div className={styles.play_controls_sound_badge}>
                                <div className={styles.playback_sound_badge}>
                                    <Link to={"/"} className={styles.playback_sound_badge_link}>
                                        <div className={styles.sc_media_image}>
                                            <span
                                                className={styles.image_full}
                                                style={{
                                                    backgroundImage: selectedTrack?.imgPath
                                                        ? `url(http://localhost:8787/${selectedTrack.imgPath})`
                                                        : "none", // Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÍ∞Ä ÏóÜÏúºÎ©¥ Ïà®ÍπÄ Ï≤òÎ¶¨
                                                }}
                                            >

                                            </span>
                                        </div>
                                    </Link>
                                    <div className={styles.playback_sound_badge_title_context_container}>
                                        <Link to={"/"} className={styles.playback_sound_badge_light_link}>Shiitake
                                            Products</Link>
                                    </div>
                                    <div className={styles.playback_sound_badge_title}>
                                        <Link to={"/"} className={styles.playback_sound_badge_title_link}>
                                            <span className={styles.visually_hidden}></span>
                                            <span
                                                aria-hidden={true}>{selectedTrack?.title || "No Track Selected"}</span>
                                        </Link>
                                    </div>
                                    <div className={styles.playback_sound_badge_actions}>
                                        <button type={"button"} className={styles.sc_button_follow} onClick={likeThis}
                                        style={{
                                            display: selectedTrack ? "block" : "none"
                                        }}>Like</button>
                                    </div>
                                </div>
                            </div>

                            {/* ÌòÑÏû¨ Ìä∏Îûô Ï†úÎ™© */}
                            <div>
                                <button type={"button"} onClick={togglePlayer} className={styles.slide_button}>‚ò∞</button>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </>
    );
};

export default MiniPlayer;

